generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  name         String?
  email        String?        @unique
  password     String?
  role         Role?          @default(student)
  is_online    DateTime?
  created_at   DateTime?      @default(now())
  comment      Comment[]
  comment_like Comment_like[]
  chats        Chat[]         @relation("UserChats")
  messages     Message[]
  post         Post[]
  post_like    Post_like[]
}

model Post {
  id         Int         @id @default(autoincrement())
  title      String
  content    String?     @db.VarChar(255)
  created_at DateTime    @default(now())
  updated_at DateTime?   @updatedAt
  deleted_at DateTime?
  author_id  Int         @default(1)
  comments   Comment[]
  author     User        @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  likes      Post_like[]
}

model Comment {
  id         Int            @id @default(autoincrement())
  post_id    Int
  author_id  Int
  answer     Int?
  text       String         @db.VarChar(255)
  created_at DateTime       @default(now())
  deleted_at DateTime?
  updated_at DateTime?      @updatedAt
  author     User           @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  post       Post           @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  likes      Comment_like[]
}

model Comment_like {
  id           Int     @id @default(autoincrement())
  is_positive  Boolean
  comment_id   Int
  evaluator_id Int
  comment      Comment @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  evaluator    User    @relation(fields: [evaluator_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Post_like {
  id           Int     @id @default(autoincrement())
  post_id      Int
  evaluator_id Int
  is_positive  Boolean
  evaluator    User    @relation(fields: [evaluator_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  post         Post    @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Chat {
  id         Int       @id @default(autoincrement())
  title      String
  users      User[]    @relation("UserChats")
  messages   Message[] 
}

model Message {
  id        Int    @id @default(autoincrement())
  author_id Int
  chat_id   Int
  text      String @db.VarChar(255)
  answer     Int?
  created_at DateTime       @default(now())
  deleted_at DateTime?
  updated_at DateTime?      @updatedAt
  author    User   @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  chat      Chat   @relation(fields: [chat_id], references: [id])
}

enum Role {
  admin
  moderator
  teacher
  student
}
