generator client {
  provider = "prisma-client-js"
  //for raw sql requests
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  moderator
  teacher
  student
}

model User{
  id              Int               @id @default(autoincrement())
  name            String?
  email           String?           @unique
  password        String?
  role            Role?             @default(student)
  is_online       DateTime?         
  created_at      DateTime?         @default(now())

  Post Post[]
  Comment Comment[]
  Comment_like Comment_like[]
}

model Post{
  id              Int               @id @default(autoincrement())
  author_id       Int               @default(1)
  title           String
  content         String?
  created_at      DateTime          @default(now())
  updated_at      DateTime?         @updatedAt
  deleted_at      DateTime?         
  // filter_year     DateTime?        
  // filter_course   String?       
  author          User              @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  comments        Comment[]
}

model Comment{
  id              Int               @id @default(autoincrement())
  post_id         Int
  author_id       Int
  answer          Int?
  text            String

  created_at      DateTime          @default(now())
  updated_at      DateTime?         @updatedAt
  deleted_at      DateTime?         

  likes           Comment_like[]
  post            Post              @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user            User              @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Comment_like{
  id              Int               @id @default(autoincrement())
  comment_id      Int
  // who rated this comment
  evaluator_id    Int
  is_positive     Boolean

  comment         Comment           @relation(fields: [comment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  evaluator       User              @relation(fields: [evaluator_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}